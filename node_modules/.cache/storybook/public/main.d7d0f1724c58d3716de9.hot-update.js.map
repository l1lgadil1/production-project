{"version":3,"file":"main.d7d0f1724c58d3716de9.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;A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","sources":["webpack://production-project/./src/shared/ui/Button/Button.stories.tsx","webpack://production-project/./src/shared/ui/Modal/Modal.stories.tsx","webpack://production-project/./src/app/providers/ThemeProvider/ui/ThemeProvider.tsx","webpack://production-project/./src/pages/MainPage/ui/MainPage.tsx","webpack://production-project/./src/shared/ui/Button/Button.tsx","webpack://production-project/./src/shared/ui/LangSwitcher/LangSwitcher.tsx","webpack://production-project/./src/shared/ui/Modal/Modal.tsx","webpack://production-project/./src/shared/ui/Portal/Portal.tsx","webpack://production-project/./src/shared/ui/ThemeSwitcher/ui/ThemeSwitcher.tsx","webpack://production-project/./src/widgets/Navbar/ui/Navbar.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from 'react';\\nimport { ComponentStory, ComponentMeta } from '@storybook/react';\\n\\nimport { ThemeDecorator } from 'shared/config/storybook/ThemeDecorator/ThemeDecorator';\\nimport { Theme } from 'app/providers/ThemeProvider';\\nimport { Button, ButtonSize, ButtonTheme } from './Button';\\n\\nexport default {\\n    title: 'shared/Button',\\n    component: Button,\\n    argTypes: {\\n        backgroundColor: { control: 'color' },\\n    },\\n} as ComponentMeta<typeof Button>;\\n\\nconst Template: ComponentStory<typeof Button> = (args) => <Button {...args} />;\\n\\nexport const Primary = Template.bind({});\\nPrimary.args = {\\n    children: 'Text',\\n};\\n\\nexport const Clear = Template.bind({});\\nClear.args = {\\n    children: 'Text',\\n    theme: ButtonTheme.CLEAR,\\n};\\n\\nexport const ClearInverted = Template.bind({});\\nClearInverted.args = {\\n    children: 'Text',\\n    theme: ButtonTheme.CLEAR_INVERTED,\\n};\\n\\nexport const Outline = Template.bind({});\\nOutline.args = {\\n    children: 'Text',\\n    theme: ButtonTheme.OUTLINE,\\n};\\n\\nexport const OutlineSizeL = Template.bind({});\\nOutlineSizeL.args = {\\n    children: 'Text',\\n    theme: ButtonTheme.OUTLINE,\\n    size: ButtonSize.L,\\n};\\n\\nexport const OutlineSizeXl = Template.bind({});\\nOutlineSizeXl.args = {\\n    children: 'Text',\\n    theme: ButtonTheme.OUTLINE,\\n    size: ButtonSize.XL,\\n};\\n\\nexport const OutlineDark = Template.bind({});\\nOutlineDark.args = {\\n    children: 'Text',\\n    theme: ButtonTheme.OUTLINE,\\n};\\nOutlineDark.decorators = [ThemeDecorator(Theme.DARK)];\\n\\nexport const BackgroundTheme = Template.bind({});\\nBackgroundTheme.args = {\\n    children: 'Text',\\n    theme: ButtonTheme.BACKGROUND,\\n};\\n\\nexport const BackgroundInverted = Template.bind({});\\nBackgroundInverted.args = {\\n    children: 'Text',\\n    theme: ButtonTheme.BACKGROUND_INVERTED,\\n};\\n\\nexport const Square = Template.bind({});\\nSquare.args = {\\n    children: '>',\\n    theme: ButtonTheme.BACKGROUND_INVERTED,\\n    square: true,\\n};\\n\\nexport const SquareSizeL = Template.bind({});\\nSquareSizeL.args = {\\n    children: '>',\\n    theme: ButtonTheme.BACKGROUND_INVERTED,\\n    square: true,\\n    size: ButtonSize.L,\\n};\\n\\nexport const SquareSizeXl = Template.bind({});\\nSquareSizeXl.args = {\\n    children: '>',\\n    theme: ButtonTheme.BACKGROUND_INVERTED,\\n    square: true,\\n    size: ButtonSize.XL,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Primary\":{\"startLoc\":{\"col\":48,\"line\":16},\"endLoc\":{\"col\":78,\"line\":16},\"startBody\":{\"col\":48,\"line\":16},\"endBody\":{\"col\":78,\"line\":16}},\"Clear\":{\"startLoc\":{\"col\":48,\"line\":16},\"endLoc\":{\"col\":78,\"line\":16},\"startBody\":{\"col\":48,\"line\":16},\"endBody\":{\"col\":78,\"line\":16}},\"ClearInverted\":{\"startLoc\":{\"col\":48,\"line\":16},\"endLoc\":{\"col\":78,\"line\":16},\"startBody\":{\"col\":48,\"line\":16},\"endBody\":{\"col\":78,\"line\":16}},\"Outline\":{\"startLoc\":{\"col\":48,\"line\":16},\"endLoc\":{\"col\":78,\"line\":16},\"startBody\":{\"col\":48,\"line\":16},\"endBody\":{\"col\":78,\"line\":16}},\"OutlineSizeL\":{\"startLoc\":{\"col\":48,\"line\":16},\"endLoc\":{\"col\":78,\"line\":16},\"startBody\":{\"col\":48,\"line\":16},\"endBody\":{\"col\":78,\"line\":16}},\"OutlineSizeXl\":{\"startLoc\":{\"col\":48,\"line\":16},\"endLoc\":{\"col\":78,\"line\":16},\"startBody\":{\"col\":48,\"line\":16},\"endBody\":{\"col\":78,\"line\":16}},\"OutlineDark\":{\"startLoc\":{\"col\":48,\"line\":16},\"endLoc\":{\"col\":78,\"line\":16},\"startBody\":{\"col\":48,\"line\":16},\"endBody\":{\"col\":78,\"line\":16}},\"BackgroundTheme\":{\"startLoc\":{\"col\":48,\"line\":16},\"endLoc\":{\"col\":78,\"line\":16},\"startBody\":{\"col\":48,\"line\":16},\"endBody\":{\"col\":78,\"line\":16}},\"BackgroundInverted\":{\"startLoc\":{\"col\":48,\"line\":16},\"endLoc\":{\"col\":78,\"line\":16},\"startBody\":{\"col\":48,\"line\":16},\"endBody\":{\"col\":78,\"line\":16}},\"Square\":{\"startLoc\":{\"col\":48,\"line\":16},\"endLoc\":{\"col\":78,\"line\":16},\"startBody\":{\"col\":48,\"line\":16},\"endBody\":{\"col\":78,\"line\":16}},\"SquareSizeL\":{\"startLoc\":{\"col\":48,\"line\":16},\"endLoc\":{\"col\":78,\"line\":16},\"startBody\":{\"col\":48,\"line\":16},\"endBody\":{\"col\":78,\"line\":16}},\"SquareSizeXl\":{\"startLoc\":{\"col\":48,\"line\":16},\"endLoc\":{\"col\":78,\"line\":16},\"startBody\":{\"col\":48,\"line\":16},\"endBody\":{\"col\":78,\"line\":16}}};\n    \nimport React from 'react';\nimport { ComponentStory, ComponentMeta } from '@storybook/react';\n\nimport { ThemeDecorator } from 'shared/config/storybook/ThemeDecorator/ThemeDecorator';\nimport { Theme } from 'app/providers/ThemeProvider';\nimport { Button, ButtonSize, ButtonTheme } from './Button';\n\nexport default {\n    title: 'shared/Button',\n    component: Button,\n    argTypes: {\n        backgroundColor: { control: 'color' },\n    },\n} as ComponentMeta<typeof Button>;\n\nconst Template: ComponentStory<typeof Button> = (args) => <Button {...args} />;\n\nexport const Primary = Template.bind({});;\nPrimary.args = {\n    children: 'Text',\n};\n\nexport const Clear = Template.bind({});;\nClear.args = {\n    children: 'Text',\n    theme: ButtonTheme.CLEAR,\n};\n\nexport const ClearInverted = Template.bind({});;\nClearInverted.args = {\n    children: 'Text',\n    theme: ButtonTheme.CLEAR_INVERTED,\n};\n\nexport const Outline = Template.bind({});;\nOutline.args = {\n    children: 'Text',\n    theme: ButtonTheme.OUTLINE,\n};\n\nexport const OutlineSizeL = Template.bind({});;\nOutlineSizeL.args = {\n    children: 'Text',\n    theme: ButtonTheme.OUTLINE,\n    size: ButtonSize.L,\n};\n\nexport const OutlineSizeXl = Template.bind({});;\nOutlineSizeXl.args = {\n    children: 'Text',\n    theme: ButtonTheme.OUTLINE,\n    size: ButtonSize.XL,\n};\n\nexport const OutlineDark = Template.bind({});;\nOutlineDark.args = {\n    children: 'Text',\n    theme: ButtonTheme.OUTLINE,\n};\nOutlineDark.decorators = [ThemeDecorator(Theme.DARK)];\n\nexport const BackgroundTheme = Template.bind({});;\nBackgroundTheme.args = {\n    children: 'Text',\n    theme: ButtonTheme.BACKGROUND,\n};\n\nexport const BackgroundInverted = Template.bind({});;\nBackgroundInverted.args = {\n    children: 'Text',\n    theme: ButtonTheme.BACKGROUND_INVERTED,\n};\n\nexport const Square = Template.bind({});;\nSquare.args = {\n    children: '>',\n    theme: ButtonTheme.BACKGROUND_INVERTED,\n    square: true,\n};\n\nexport const SquareSizeL = Template.bind({});;\nSquareSizeL.args = {\n    children: '>',\n    theme: ButtonTheme.BACKGROUND_INVERTED,\n    square: true,\n    size: ButtonSize.L,\n};\n\nexport const SquareSizeXl = Template.bind({});\nSquareSizeXl.args = {\n    children: '>',\n    theme: ButtonTheme.BACKGROUND_INVERTED,\n    square: true,\n    size: ButtonSize.XL,\n};\n\n\n\nPrimary.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...Primary.parameters };\nClear.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...Clear.parameters };\nClearInverted.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...ClearInverted.parameters };\nOutline.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...Outline.parameters };\nOutlineSizeL.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...OutlineSizeL.parameters };\nOutlineSizeXl.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...OutlineSizeXl.parameters };\nOutlineDark.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...OutlineDark.parameters };\nBackgroundTheme.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...BackgroundTheme.parameters };\nBackgroundInverted.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...BackgroundInverted.parameters };\nSquare.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...Square.parameters };\nSquareSizeL.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...SquareSizeL.parameters };\nSquareSizeXl.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...SquareSizeXl.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from 'react';\\nimport { ComponentMeta, ComponentStory } from '@storybook/react';\\nimport { Modal } from 'shared/ui/Modal/Modal';\\nimport { ThemeDecorator } from 'shared/config/storybook/ThemeDecorator/ThemeDecorator';\\nimport { Theme } from 'app/providers/ThemeProvider';\\n\\nexport default {\\n    title: 'shared/Modal',\\n    component: Modal,\\n    argTypes: {\\n        backgroundColor: { control: 'color' },\\n    },\\n} as ComponentMeta<typeof Modal>;\\n\\nconst Template: ComponentStory<typeof Modal> = (args) => <Modal {...args} />;\\n\\nexport const Primary = Template.bind({});\\nPrimary.args = {\\n    isOpen: true,\\n    children: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquid commodi consequatur eligendi impedit incidunt necessitatibus possimus quis saepe sunt totam.\\\\n ',\\n};\\n\\nexport const Dark = Template.bind({});\\nDark.args = {\\n    isOpen: true,\\n    children: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquid commodi consequatur eligendi impedit incidunt necessitatibus possimus quis saepe sunt totam.\\\\n ',\\n};\\nDark.decorators = [ThemeDecorator(Theme.DARK)];\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Primary\":{\"startLoc\":{\"col\":47,\"line\":15},\"endLoc\":{\"col\":76,\"line\":15},\"startBody\":{\"col\":47,\"line\":15},\"endBody\":{\"col\":76,\"line\":15}},\"Dark\":{\"startLoc\":{\"col\":47,\"line\":15},\"endLoc\":{\"col\":76,\"line\":15},\"startBody\":{\"col\":47,\"line\":15},\"endBody\":{\"col\":76,\"line\":15}}};\n    \nimport React from 'react';\nimport { ComponentMeta, ComponentStory } from '@storybook/react';\nimport { Modal } from 'shared/ui/Modal/Modal';\nimport { ThemeDecorator } from 'shared/config/storybook/ThemeDecorator/ThemeDecorator';\nimport { Theme } from 'app/providers/ThemeProvider';\n\nexport default {\n    title: 'shared/Modal',\n    component: Modal,\n    argTypes: {\n        backgroundColor: { control: 'color' },\n    },\n} as ComponentMeta<typeof Modal>;\n\nconst Template: ComponentStory<typeof Modal> = (args) => <Modal {...args} />;\n\nexport const Primary = Template.bind({});;\nPrimary.args = {\n    isOpen: true,\n    children: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquid commodi consequatur eligendi impedit incidunt necessitatibus possimus quis saepe sunt totam.\\n ',\n};\n\nexport const Dark = Template.bind({});\nDark.args = {\n    isOpen: true,\n    children: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquid commodi consequatur eligendi impedit incidunt necessitatibus possimus quis saepe sunt totam.\\n ',\n};\nDark.decorators = [ThemeDecorator(Theme.DARK)];\n\n\n\nPrimary.parameters = { storySource: { source: \"(args) => <Modal {...args} />\" }, ...Primary.parameters };\nDark.parameters = { storySource: { source: \"(args) => <Modal {...args} />\" }, ...Dark.parameters };","import React, { FC, useMemo, useState } from 'react';\nimport { LOCAL_STORAGE_THEME_KEY, Theme, ThemeContext } from '../lib/ThemeContext';\n\nconst defaultTheme = localStorage.getItem(LOCAL_STORAGE_THEME_KEY) as Theme || Theme.LIGHT;\n\ninterface ThemeProviderProps {\n    initialTheme?: Theme;\n}\n\nconst ThemeProvider: FC<ThemeProviderProps> = (props) => {\n    const {\n        initialTheme,\n        children,\n    } = props;\n\n    const [theme, setTheme] = useState<Theme>(initialTheme || defaultTheme);\n\n    const defaultProps = useMemo(() => ({\n        theme,\n        setTheme,\n    }), [theme]);\n\n    return (\n        <ThemeContext.Provider value={defaultProps}>\n            {children}\n        </ThemeContext.Provider>\n    );\n};\n\nexport default ThemeProvider;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst MainPage = () => {\n    const { t } = useTranslation();\n\n    return (\n        <div>\n            {t('Главная страница')}\n        </div>\n    );\n};\n\nexport default MainPage;\n","import { classNames } from 'shared/lib/classNames/classNames';\nimport { ButtonHTMLAttributes, FC } from 'react';\nimport cls from './Button.module.scss';\n\nexport enum ButtonTheme {\n    CLEAR = 'clear',\n    CLEAR_INVERTED = 'clearInverted',\n    OUTLINE = 'outline',\n    BACKGROUND = 'background',\n    BACKGROUND_INVERTED = 'backgroundInverted',\n}\n\nexport enum ButtonSize {\n    M = 'size_m',\n    L = 'size_l',\n    XL = 'size_xl',\n}\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement>{\n    className?: string;\n    theme?: ButtonTheme;\n    square?: boolean;\n    size?: ButtonSize;\n}\n\nexport const Button: FC<ButtonProps> = (props) => {\n    const {\n        className,\n        children,\n        theme,\n        square,\n        size = ButtonSize.M,\n        ...otherProps\n    } = props;\n\n    const mods: Record<string, boolean> = {\n        [cls[theme]]: true,\n        [cls.square]: square,\n        [cls[size]]: true,\n    };\n\n    return (\n        <button\n            type=\"button\"\n            className={classNames(cls.Button, mods, [className])}\n            {...otherProps}\n        >\n            {children}\n        </button>\n    );\n};\n","import { classNames } from 'shared/lib/classNames/classNames';\nimport { useTranslation } from 'react-i18next';\nimport React from 'react';\nimport { Button, ButtonTheme } from 'shared/ui/Button/Button';\n\ninterface LangSwitcherProps {\n    className?: string;\n    short?: boolean;\n}\n\nexport const LangSwitcher = ({ className, short }: LangSwitcherProps) => {\n    const { t, i18n } = useTranslation();\n\n    const toggle = async () => {\n        i18n.changeLanguage(i18n.language === 'ru' ? 'en' : 'ru');\n    };\n\n    return (\n        <Button\n            className={classNames('', {}, [className])}\n            theme={ButtonTheme.CLEAR}\n            onClick={toggle}\n        >\n            {t(short ? 'Короткий язык' : 'Язык')}\n        </Button>\n    );\n};\n","import { classNames } from 'shared/lib/classNames/classNames';\nimport React, {\n    ReactNode, useCallback, useEffect, useRef, useState,\n} from 'react';\nimport { Portal } from 'shared/ui/Portal/Portal';\nimport { useTheme } from 'app/providers/ThemeProvider';\nimport cls from './Modal.module.scss';\n\ninterface ModalProps {\n    className?: string;\n    children?: ReactNode;\n    isOpen?: boolean;\n    onClose?: () => void;\n}\n\nconst ANIMATION_DELAY = 300;\n\nexport const Modal = (props: ModalProps) => {\n    const {\n        className,\n        children,\n        isOpen,\n        onClose,\n    } = props;\n\n    const [isClosing, setIsClosing] = useState(false);\n    const timerRef = useRef<ReturnType<typeof setTimeout>>();\n    const { theme } = useTheme();\n\n    const closeHandler = useCallback(() => {\n        if (onClose) {\n            setIsClosing(true);\n            timerRef.current = setTimeout(() => {\n                onClose();\n                setIsClosing(false);\n            }, ANIMATION_DELAY);\n        }\n    }, [onClose]);\n\n    // Новые ссылки!!!\n    const onKeyDown = useCallback((e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n            closeHandler();\n        }\n    }, [closeHandler]);\n\n    const onContentClick = (e: React.MouseEvent) => {\n        e.stopPropagation();\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            window.addEventListener('keydown', onKeyDown);\n        }\n\n        return () => {\n            clearTimeout(timerRef.current);\n            window.removeEventListener('keydown', onKeyDown);\n        };\n    }, [isOpen, onKeyDown]);\n\n    const mods: Record<string, boolean> = {\n        [cls.opened]: isOpen,\n        [cls.isClosing]: isClosing,\n        [cls[theme]]: true,\n    };\n\n    return (\n        <Portal>\n            <div className={classNames(cls.Modal, mods, [className])}>\n                <div className={cls.overlay} onClick={closeHandler}>\n                    <div\n                        className={cls.content}\n                        onClick={onContentClick}\n                    >\n                        {children}\n                    </div>\n                </div>\n            </div>\n        </Portal>\n    );\n};\n","import { ReactNode } from 'react';\nimport { createPortal } from 'react-dom';\n\ninterface PortalProps {\n    children: ReactNode;\n    element?: HTMLElement;\n}\n\nexport const Portal = (props: PortalProps) => {\n    const {\n        children,\n        element = document.body,\n    } = props;\n\n    return createPortal(children, element);\n};\n","import { classNames } from 'shared/lib/classNames/classNames';\nimport React from 'react';\nimport { Theme, useTheme } from 'app/providers/ThemeProvider';\nimport LightIcon from 'shared/assets/icons/theme-light.svg';\nimport DarkIcon from 'shared/assets/icons/theme-dark.svg';\nimport { Button, ButtonTheme } from 'shared/ui/Button/Button';\n\ninterface ThemeSwitcherProps {\n    className?: string;\n}\n\nexport const ThemeSwitcher = ({ className }: ThemeSwitcherProps) => {\n    const { theme, toggleTheme } = useTheme();\n\n    return (\n        <Button\n            theme={ButtonTheme.CLEAR}\n            className={classNames('', {}, [className])}\n            onClick={toggleTheme}\n        >\n            {theme === Theme.DARK ? <DarkIcon /> : <LightIcon />}\n        </Button>\n    );\n};\n","import { classNames } from 'shared/lib/classNames/classNames';\nimport { useTranslation } from 'react-i18next';\nimport { Modal } from 'shared/ui/Modal/Modal';\nimport React, { useCallback, useState } from 'react';\nimport { Button, ButtonTheme } from 'shared/ui/Button/Button';\nimport cls from './Navbar.module.scss';\n\ninterface NavbarProps {\n    className?: string;\n}\n\nexport const Navbar = ({ className }: NavbarProps) => {\n    const { t } = useTranslation();\n    const [isAuthModal, setIsAuthModal] = useState(false);\n\n    const onToggleModal = useCallback(() => {\n        setIsAuthModal((prev) => !prev);\n    }, []);\n\n    return (\n        <div className={classNames(cls.Navbar, {}, [className])}>\n            <Button\n                theme={ButtonTheme.CLEAR_INVERTED}\n                className={cls.links}\n                onClick={onToggleModal}\n            >\n                {t('Войти')}\n            </Button>\n            <Modal isOpen={isAuthModal} onClose={onToggleModal}>\n                {/* eslint-disable-next-line */}\n                {t('Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquid commodi consequatur eligendi impedit incidunt necessitatibus possimus quis saepe sunt totam.')}\n            </Modal>\n        </div>\n    );\n};\n"],"names":[],"sourceRoot":""}